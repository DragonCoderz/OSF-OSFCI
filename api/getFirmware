# (c) Hewlett Packard Enterprise LP - 2020
#!/bin/bash

function check_requirements() {
	for i in jq openssl base64 curl
	do
		command=`which $i`
		if [ "$command" == "" ]
		then
			echo "Error: Please install $i or verify it is accessible through your default execution path variable"
			exit 1
		fi
	done
}

function help() {
   echo "get_firmware is a command line tool allowing you to download your OpenBMC or Linuxboot firmware from an OSFCI instance"
   echo ""
   echo "Mandatory options are:"
   echo "-f or --firmware <openbmc|linuxboot> : to select which firmware to download"
   exit 0
}

check_requirements

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -f|--firmware)
    firmware="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    shift # past argument
    help
    exit 1
    ;;
esac
done

username=`cat $HOME/.osfci/auth | awk '{ print $1}'`

if [ "$firmware" == "" ]
then
echo "Error missing firmware parameter : -f|--firmware"
echo ""
help
fi

accessKey=`cat $HOME/.osfci/auth | awk '{ print $2 }'`
secretKey=`cat $HOME/.osfci/auth | awk '{ print $3 }'`
dateFormatted=`TZ=GMT date -R`
if [ "$firmware" == "linuxboot" ] 
then
command="https://osfci.tech/user/$username/getLinuxBoot/dl360gen10"
relativePath="/user/$username/getLinuxBoot/dl360gen10"
else
	if [ "$firmware" == "openbmc" ]
	then
command="https://osfci.tech/user/$username/getOpenBMC/dl360poc"
relativePath="/user/$username/getOpenBMC/dl360poc"
	fi
fi
#relativePath="/user/$username/$command"
contentType="application/octet-stream"
stringToSign="GET\n\n${contentType}\n${dateFormatted}\n${relativePath}"
signature=`echo -en ${stringToSign} | openssl sha1 -hmac ${secretKey} -binary | base64`
curl --output $firmware.rom -X GET \
-H "Host: osfci.tech" \
-H "mydate: ${dateFormatted}" \
-H "Content-Type: ${contentType}" \
-H "Authorization: OSF ${accessKey}:${signature}" \
$command
